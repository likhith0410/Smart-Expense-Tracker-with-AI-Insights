===============================================================================
                    SMART EXPENSE TRACKER - COMPLETE INSTALLATION GUIDE
===============================================================================

📋 TABLE OF CONTENTS
-------------------
1. Prerequisites
2. Project Structure Creation
3. Backend Setup (Django)
4. Frontend Setup (React)
5. Database Configuration
6. Running the Application
7. Testing & Verification
8. Troubleshooting
9. Additional Features Setup

===============================================================================
1. PREREQUISITES
===============================================================================

Required Software:
- Python 3.8+ (Recommended: Python 3.13.2)
- Node.js 14+ (Recommended: Latest LTS)
- Git
- Code Editor (VS Code recommended)

Optional for Receipt Scanning:
- Tesseract OCR

===============================================================================
2. PROJECT STRUCTURE CREATION
===============================================================================

# Create main project directory
mkdir smart-expense-tracker
cd smart-expense-tracker

# Create frontend with React
npx create-react-app frontend
cd frontend

# Install frontend dependencies
npm install react-router-dom axios chart.js react-chartjs-2 framer-motion lucide-react date-fns react-hot-toast

# Create frontend directory structure
mkdir -p src/components src/pages src/services src/styles src/utils

# Create component files
touch src/components/Dashboard.jsx
touch src/components/ExpenseForm.jsx
touch src/components/ExpenseList.jsx
touch src/components/ExpenseChart.jsx
touch src/components/Analytics.jsx
touch src/components/ReceiptScanner.jsx
touch src/components/ThemeToggle.jsx
touch src/components/Navbar.jsx
touch src/components/Login.jsx
touch src/components/Register.jsx

# Create page files
touch src/pages/Home.jsx
touch src/pages/Expenses.jsx
touch src/pages/Reports.jsx

# Create service files
touch src/services/api.js
touch src/services/authService.js
touch src/services/exportService.js
touch src/services/currencyService.js

# Create style files
touch src/styles/App.css
touch src/styles/Dashboard.css
touch src/styles/ExpenseForm.css
touch src/styles/Navbar.css
touch src/styles/Auth.css
touch src/styles/ExpenseList.css
touch src/styles/Expenses.css

# Create utility files
touch src/utils/helpers.js

# Go back to main directory
cd ..

===============================================================================
3. BACKEND SETUP (DJANGO)
===============================================================================

# Create backend directory
mkdir backend
cd backend

# Create virtual environment
python -m venv venv

# Activate virtual environment
# Windows:
venv\Scripts\activate
# Mac/Linux:
# source venv/bin/activate

# Install Django and dependencies
pip install Django==4.2.7
pip install djangorestframework==3.14.0
pip install django-cors-headers==4.3.1
pip install Pillow==10.1.0
pip install pytesseract==0.3.10
pip install scikit-learn==1.3.2
pip install pandas==2.1.3
pip install numpy==1.25.2
pip install python-dotenv==1.0.0
pip install python-dateutil==2.8.2
pip install requests==2.31.0

# Create Django project
django-admin startproject expense_tracker .

# Create Django apps
python manage.py startapp authentication
python manage.py startapp expenses
python manage.py startapp ai_insights

# Create additional files in apps
touch authentication/serializers.py
touch authentication/urls.py
touch expenses/serializers.py
touch expenses/urls.py
touch ai_insights/serializers.py
touch ai_insights/urls.py
touch ai_insights/ml_service.py

# Create media and static directories
mkdir media
mkdir static

# Create requirements.txt
pip freeze > requirements.txt

# Go back to main directory
cd ..

===============================================================================
4. FRONTEND CONFIGURATION
===============================================================================

# Update package.json to add proxy
cd frontend
# Add this line to package.json:
# "proxy": "http://localhost:8000"

# Copy all provided React component code to respective files
# (Dashboard.jsx, ExpenseForm.jsx, etc.)

# Copy all provided CSS code to respective files
# (App.css, Dashboard.css, etc.)

cd ..

===============================================================================
5. BACKEND CONFIGURATION
===============================================================================

cd backend

# Copy provided Django code to respective files:
# - expense_tracker/settings.py
# - expense_tracker/urls.py
# - authentication/models.py, views.py, serializers.py, urls.py
# - expenses/models.py, views.py, serializers.py, urls.py
# - ai_insights/models.py, views.py, serializers.py, urls.py, ml_service.py

===============================================================================
6. DATABASE CONFIGURATION
===============================================================================

# Run migrations
python manage.py makemigrations
python manage.py makemigrations authentication
python manage.py makemigrations expenses
python manage.py makemigrations ai_insights
python manage.py migrate

# Create superuser
python manage.py createsuperuser
# Enter username, email, and password when prompted

# Create default categories via Django shell
python manage.py shell

# In Django shell, run:
from expenses.models import Category
Category.objects.create(name="Food & Dining", icon="🍽️", color="#ef4444")
Category.objects.create(name="Transportation", icon="🚗", color="#3b82f6")
Category.objects.create(name="Shopping", icon="🛍️", color="#8b5cf6")
Category.objects.create(name="Entertainment", icon="🎬", color="#f59e0b")
Category.objects.create(name="Healthcare", icon="🏥", color="#10b981")
Category.objects.create(name="Utilities", icon="⚡", color="#06b6d4")
Category.objects.create(name="Education", icon="📚", color="#84cc16")
Category.objects.create(name="Groceries", icon="🛒", color="#f97316")
Category.objects.create(name="Fitness", icon="💪", color="#ec4899")
Category.objects.create(name="Travel", icon="✈️", color="#14b8a6")
Category.objects.create(name="Bills", icon="📄", color="#6366f1")
Category.objects.create(name="Other", icon="💰", color="#64748b")
exit()

===============================================================================
7. RUNNING THE APPLICATION
===============================================================================

# Terminal 1 - Backend (Django)
cd backend
venv\Scripts\activate  # Windows
# source venv/bin/activate  # Mac/Linux
python manage.py runserver

# Terminal 2 - Frontend (React)
cd frontend
npm start

# Application URLs:
# Frontend: http://localhost:3000
# Backend API: http://localhost:8000
# Django Admin: http://localhost:8000/admin

===============================================================================
8. TESTING & VERIFICATION
===============================================================================

Backend API Endpoints to Test:
- GET http://localhost:8000/api/auth/profile/
- GET http://localhost:8000/api/expenses/categories/
- GET http://localhost:8000/api/expenses/expenses/
- POST http://localhost:8000/api/auth/login/

Frontend Features to Test:
✅ User Registration & Login
✅ Dark/Light Theme Toggle
✅ Add/Edit/Delete Expenses
✅ Expense Filtering & Search
✅ Dashboard Analytics
✅ Multi-Currency Support
✅ Export Reports (CSV, Excel, PDF)
✅ Receipt Image Upload
✅ AI Expense Categorization

===============================================================================
9. OPTIONAL: TESSERACT OCR SETUP (For Receipt Scanning)
===============================================================================

Windows:
1. Download from: https://github.com/UB-Mannheim/tesseract/wiki
2. Install tesseract-ocr-w64-setup-5.3.3.20231005.exe
3. Add to PATH: C:\Program Files\Tesseract-OCR
4. Verify: tesseract --version

Mac:
brew install tesseract

Linux:
sudo apt-get install tesseract-ocr

Test OCR in Django shell:
python manage.py shell
import pytesseract
from PIL import Image
print("Tesseract version:", pytesseract.get_tesseract_version())

===============================================================================
10. TROUBLESHOOTING
===============================================================================

Common Issues:

1. "Module not found" errors:
   - Ensure virtual environment is activated
   - Check if all dependencies are installed
   - Verify Python path

2. CORS errors:
   - Check django-cors-headers is installed
   - Verify CORS settings in Django settings.py

3. Database errors:
   - Run python manage.py migrate
   - Check if categories are created

4. Frontend compilation errors:
   - Ensure all React dependencies are installed
   - Check for syntax errors in JSX files

5. API connection errors:
   - Verify both servers are running
   - Check proxy setting in package.json

===============================================================================
11. PROJECT STRUCTURE OVERVIEW
===============================================================================

smart-expense-tracker/
├── frontend/                    # React.js Frontend
│   ├── public/
│   ├── src/
│   │   ├── components/         # React Components
│   │   ├── pages/             # Main Pages
│   │   ├── services/          # API Services
│   │   ├── styles/            # CSS Files
│   │   ├── utils/             # Helper Functions
│   │   ├── App.jsx            # Main App
│   │   └── index.js           # Entry Point
│   └── package.json
├── backend/                     # Django Backend
│   ├── expense_tracker/        # Main Django Project
│   ├── authentication/        # Auth App
│   ├── expenses/              # Expenses App
│   ├── ai_insights/           # AI Features App
│   ├── media/                 # Uploaded Files
│   ├── static/                # Static Files
│   ├── venv/                  # Virtual Environment
│   ├── requirements.txt       # Python Dependencies
│   └── manage.py              # Django Management
├── README.md
└── .gitignore

===============================================================================
12. DEPLOYMENT PREPARATION
===============================================================================

For Production Deployment:

1. Frontend Build:
   cd frontend
   npm run build

2. Django Production Settings:
   - Set DEBUG = False
   - Configure allowed hosts
   - Set up proper database (PostgreSQL)
   - Configure static files

3. Environment Variables:
   - SECRET_KEY
   - DATABASE_URL
   - DEBUG
   - ALLOWED_HOSTS

===============================================================================
13. ADDITIONAL FEATURES (ADVANCED)
===============================================================================

Future Enhancements Available:
- Voice Expense Recording (Web Speech API)
- Financial Health Score Calculator
- Progressive Web App (PWA)
- Real-time Notifications
- Bank Account Integration
- Advanced Analytics
- Social Features

===============================================================================

🎉 CONGRATULATIONS! 
Your Smart Expense Tracker is now fully installed and ready to use!

Access your application at:
- Frontend: http://localhost:3000
- Backend Admin: http://localhost:8000/admin

Happy expense tracking! 🚀

===============================================================================






================================================================================

📱 Receipt Scanning Setup (Tesseract OCR)
Windows Installation
Method 1: Direct Download (Recommended)

Download Tesseract:

Go to: https://github.com/UB-Mannheim/tesseract/wiki
Download: tesseract-ocr-w64-setup-5.3.3.20231005.exe
Install with default settings


Add to PATH:

Installation path: C:\Program Files\Tesseract-OCR
Add to System PATH environment variable


Verify Installation:
batchtesseract --version


Method 2: Using Chocolatey
batchchoco install tesseract
Method 3: Using Windows Package Manager
batchwinget install UB-Mannheim.TesseractOCR
Test OCR Installation
python# Test in Django shell
python manage.py shell

# Run this Python code:
import pytesseract
from PIL import Image
print("Tesseract version:", pytesseract.get_tesseract_version())
print("✅ OCR is ready!")
🔧 If Installation Fails
Add this to your Django settings.py:
python# Point to Tesseract executable
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
📄 How Receipt Scanning Works

Upload receipt image in the expense form
AI extracts merchant name and amount
Auto-categorizes expense using ML
Pre-fills the expense form
User reviews and saves
